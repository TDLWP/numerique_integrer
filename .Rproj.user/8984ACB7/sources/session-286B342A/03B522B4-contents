# Définition de la fonction f(x)
f <- function(x) x^2

#De preference prendre n tres grand, mais pas trop (exemple :" n = 10^6~10^9")


#integration simple

library(pracma)

integrate(f, lower=0, upper=1)



Simpson_integration <- function(f, a, b, n) {
  h <- (b - a) / n
  x <- seq(a, b, by = h)
  y <- f(x)
  sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}




# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,100000)
print(int_simpson) # affiche le résultat de l'intégrale




trapeze_integration <- function(f, a, b, n) {
  h <- (b - a) / n
  x <- seq(a, b, by = h)
  y <- f(x)
  sum((y[-1] + y[-n]) * h / 2)
}



# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode des trapèzes
int_trapeze <- trapeze_integration(f, 0, 1,10000)
print(int_trapeze) # affiche le résultat de l'intégrale



  rectangle_integration <- function(f, a, b, n) {
    h <- (b - a) / n
    x <- seq(a + h/2, b - h/2, by = h)
    sum(f(x) * h)
  }



  rectangles_integration <- function(f, a, b, n) {
    h <- (b - a) / n  # Largeur de chaque rectangle
    x <- seq(a, b, length.out = n+1)  # Points d'évaluation des rectangles
    y <- f(x)  # Valeurs de la fonction aux points d'évaluation
    sum(y[-n] * h)  # Calcul de l'approximation de l'intégrale
  }



# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode des rectangles (ici à gauche)
int_rectangles_gauche <- rectangle_integration(f, 0, 1, 10000)
print(int_rectangles_gauche) # affiche l'integrale



#Méthode de Monte Carlo pour l'intégration numérique

monte_carlo_integration <- function(f, a, b, n) {
  x <- runif(n, min = a, max = b)
  mean(f(x)) * (b - a)
}



int_rectangles_gauche <- monte_carlo_integration(f, 0, 1, 10000)
print(int_rectangles_gauche)

