source("~/IntegrationNumeriqueTDLWP/R/Methode_de_la_quadrature_de_Romberg.R")
source("~/IntegrationNumeriqueTDLWP/R/Methode_de_la_quadrature_de_Romberg.R")
source("~/IntegrationNumeriqueTDLWP/R/methode_des_rectangles_en_R.R")
library(pracma)
install.packages("pracma")
install.packages("pracma", dependencies = FALSE)
install.packages("devtools", dependencies = FALSE)
install.packages("devtools", dependencies = FALSE)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("pracma", dependencies = FALSE)
install.packages("pracma")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("pracma")
install.packages("pracma", dependencies = FALSE)
install.packages("devtools", dependencies = FALSE)
install.packages("pracma", dependencies = FALSE)
install.packages("devtools", dependencies = FALSE)
install.packages("pracma")
install.packages("pracma")
source("~/IntegrationNumeriqueTDLWP/R/methode_des_rectangles_en_R.R")
install.packages("pracma")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("pracma")
install.packages("pracma")
install.packages("pracma")
install.packages("pracma")
install.packages("pracma")
install.packages("pracma")
library(pracma)
f <- function(x) x^2
integrate(f, lower=0, upper=1)
install.packages("rcppeigen")
install.packages("RcppEigen")
install.packages("RcppEigen")
install.packages("pracma")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tydiverse")
install.packages("tidyverse")
install.packages("tydiverse")
install.packages("tydiverse")
install.packages("tidyverse")
install.packages("pracma")
install.packages("RcppEigen")
install.packages("devtools")
load("~/IntegrationNumeriqueTDLWP/.RData")
#integration simple
library(pracma)
f <- function(x) x^2
integrate(f, lower=0, upper=1)
#Méthode du trapèze pour l'intégration numérique
trapezoid_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[-1] + y[-n]) * h / 2)
}
# Méthode des rectangles pour l'intégration numérique
rectangle_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a + h/2, b - h/2, by = h)
sum(f(x) * h)
}
#ou
"""
rectangles_integration <- function(f, a, b, n) {
h <- (b - a) / n  # Largeur de chaque rectangle
x <- seq(a, b, length.out = n+1)  # Points d'évaluation des rectangles
y <- f(x)  # Valeurs de la fonction aux points d'évaluation
sum(y[-n] * h)  # Calcul de l'approximation de l'intégrale
}
"""
# Méthode des rectangles pour l'intégration numérique
rectangle_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a + h/2, b - h/2, by = h)
sum(f(x) * h)
}
#ou
"
rectangles_integration <- function(f, a, b, n) {
h <- (b - a) / n  # Largeur de chaque rectangle
x <- seq(a, b, length.out = n+1)  # Points d'évaluation des rectangles
y <- f(x)  # Valeurs de la fonction aux points d'évaluation
sum(y[-n] * h)  # Calcul de l'approximation de l'intégrale
}
"""
# Méthode des rectangles pour l'intégration numérique
rectangle_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a + h/2, b - h/2, by = h)
sum(f(x) * h)
}
rectangles_integration <- function(f, a, b, n) {
h <- (b - a) / n  # Largeur de chaque rectangle
x <- seq(a, b, length.out = n+1)  # Points d'évaluation des rectangles
y <- f(x)  # Valeurs de la fonction aux points d'évaluation
sum(y[-n] * h)  # Calcul de l'approximation de l'intégrale
}
# Méthode des rectangles pour l'intégration numérique
rectangle_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a + h/2, b - h/2, by = h)
sum(f(x) * h)
}
#Méthode de Simpson pour l'intégration numérique
simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
#Méthode de Monte Carlo pour l'intégration numérique
monte_carlo_integration <- function(f, a, b, n) {
x <- runif(n, min = a, max = b)
mean(f(x)) * (b - a)
}
#Méthode de la quadrature gaussienne (fonction gauss.quad du package pracma) pour l'intégration numérique
library(pracma)
quadrature_gaussienne_integration <- function(x) x^2
a <- 0
b <- 1
result <- gauss.quad(f, a, b)
#Méthode de la quadrature gaussienne (fonction gauss.quad du package pracma) pour l'intégration numérique
library(pracma)
quadrature_gaussienne_integration <- function(x) x^2
a <- 0
b <- 1
result <- gauss.quad(f, a, b)
#Méthode de la quadrature de Romberg (fonction romberg du package pracma) pour l'intégration numérique
library(pracma)
quadrature_de_Romberg_integration <- function(x) x^2
a <- 0
b <- 1
result <- romberg(f, a, b)
print(result)
§pracma
?pracma
??pracma
library(pracma)
??pracma
?pracma
# Définition de la fonction f(x)
f <- function(x) x^2
f# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
#Méthode de Simpson pour l'intégration numérique
simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1)
print(int_simpson) # affiche le résultat de l'intégrale
print(int_trapeze) # affiche le résultat de l'intégrale
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode des rectangles (ici à gauche)
int_rectangles_gauche <- rectangles(f, 0, 1, method = "gauche")
# Définition de la fonction f(x)
f <- function(x) x^2
simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1)
# Définition de la fonction f(x)
f <- function(x) x^2
Simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,10)
# Définition de la fonction f(x)
f <- function(x) x^2
Simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,10)
f <- function(x) x^2
Simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
int_simpson <- Simpson_integration(f, 0, 1,10)
print(int_simpson)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,100)
int_simpson <- Simpson_integration(f, 0, 1,100)
print(int_simpson)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,2)
int_simpson <- Simpson_integration(f, 0, 1,2)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,3)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,4)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,14)
int_simpson <- Simpson_integration(f, 0, 1,14)
print(int_simpson) # affiche le résultat de l'intégrale
library(pracma)
f <- function(x) log(x)
integrate(f, lower=0, upper=1)
# Définition de la fonction f(x)
f <- function(x) x^2
integrate(f, lower=0, upper=1)
Simpson_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[1] + y[n] + 4*sum(y[seq(2, n-1, by = 2)]) + 2*sum(y[seq(3, n-2, by = 2)])) * h / 3)
}
int_simpson <- Simpson_integration(f, 0, 1,14)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,14)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,20)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,100)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,100000)
print(int_simpson)
trapeze_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[-1] + y[-n]) * h / 2)
int_trapeze <- trapeze_integration(f, 0, 1,1000000000000)
print(int_trapeze)
trapeze_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[-1] + y[-n]) * h / 2)
}
}
trapeze_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a, b, by = h)
y <- f(x)
sum((y[-1] + y[-n]) * h / 2)
}
int_trapeze <- trapeze_integration(f, 0, 1,1000000000000)
----------------------------------------------------------------------------
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode des trapèzes
int_trapeze <- trapeze_integration(f, 0, 1,1000000)
int_trapeze <- trapeze_integration(f, 0, 1,1000000)
print(int_trapeze)
int_trapeze <- trapeze_integration(f, 0, 1,100000)
print(int_trapeze)
int_trapeze <- trapeze_integration(f, 0, 1,10000)
print(int_trapeze)
int_trapeze <- trapeze_integration(f, 0, 1,1000)
print(int_trapeze)
int_simpson <- Simpson_integration(f, 0, 1,10000)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,100000)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,1000000)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,10000000)
print(int_simpson)
int_simpson <- Simpson_integration(f, 0, 1,100000000)
print(int_simpson)
rectangle_integration <- function(f, a, b, n) {
h <- (b - a) / n
x <- seq(a + h/2, b - h/2, by = h)
sum(f(x) * h)
}
int_rectangles_gauche <- rectangle_integration(f, 0, 1, method = "gauche")
int_rectangles_gauche <- rectangle_integration(f, 0, 1, 1000000)
print(int_rectangles_gauche)
int_rectangles_gauche <- rectangle_integration(f, 0, 1, 10000)
print(int_rectangles_gauche)
rectangles_integration <- function(f, a, b, n) {
h <- (b - a) / n  # Largeur de chaque rectangle
x <- seq(a, b, length.out = n+1)  # Points d'évaluation des rectangles
y <- f(x)  # Valeurs de la fonction aux points d'évaluation
sum(y[-n] * h)  # Calcul de l'approximation de l'intégrale
}
int_rectangles_gauche <- rectangle_integration(f, 0, 1, 10000)
print(int_rectangles_gauche)
monte_carlo_integration <- function(f, a, b, n) {
x <- runif(n, min = a, max = b)
mean(f(x)) * (b - a)
}
monte_carlo_integration <- function(f, a, b, n) {
x <- runif(n, min = a, max = b)
mean(f(x)) * (b - a)
}
int_rectangles_gauche <- monte_carlo_integration(f, 0, 1, 10000)
print(int_rectangles_gauche)
library(devtools)
install.packages("devtools")
install.packages("htmlwidgets")
devtools::document()
install.packages("stringi")
install.packages("stringi")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(IntegrationNumeriqueTTEF)
# Calcul de l'intégrale de f(x) sur [0, 1] avec la méthode de Simpson
int_simpson <- Simpson_integration(f, 0, 1,100000)
print(int_simpson) # affiche le résultat de l'intégrale
devtools::document()
